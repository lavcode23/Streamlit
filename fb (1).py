# -*- coding: utf-8 -*-
"""fb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EoMDnYY7yN2GWBkIqH6ANTsO6vHPxZh2
"""

import sqlite3

# Connect to SQLite database
conn = sqlite3.connect('facebook_clone.db')
cursor = conn.cursor()

# Create 'users' table
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    age INTEGER,
    bio TEXT
)
''')

# Create 'posts' table
cursor.execute('''
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    content TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
''')

conn.commit()
print("Database and tables created successfully!")

def create_user(username, email, age, bio=""):
    cursor.execute('''
    INSERT INTO users (username, email, age, bio)
    VALUES (?, ?, ?, ?)
    ''', (username, email, age, bio))
    conn.commit()
    print(f"User '{username}' created successfully!")

create_user("Lavisha Yadav", "lavisha150@gmail.com", 21, "Hello! This is Lavisha's profile.")

def login_user(email):
    cursor.execute("SELECT * FROM users WHERE email = ?", (email,))
    user = cursor.fetchone()
    if user:
        print(f"Logged in as {user[1]}")
        return user[0]  # Returning user ID for session management
    else:
        print("User not found.")
        return None

user_id = login_user("lavisha150@gmail.com")  # Store this user_id to use with posts

def create_post(user_id, content):
    if user_id:
        cursor.execute('''
        INSERT INTO posts (user_id, content)
        VALUES (?, ?)
        ''', (user_id, content))
        conn.commit()
        print(f"Post created successfully for User ID {user_id}")
    else:
        print("User must be logged in to create a post.")

create_post(user_id, "Hello, this is my first post!")

def view_my_posts(user_id):
    cursor.execute("SELECT * FROM posts WHERE user_id = ?", (user_id,))
    posts = cursor.fetchall()
    if posts:
        print(f"Posts for User ID {user_id}:")
        for post in posts:
            print(post)
    else:
        print("No posts found for this user.")

view_my_posts(user_id)

def update_post(user_id, post_id, new_content):
    cursor.execute("SELECT * FROM posts WHERE id = ? AND user_id = ?", (post_id, user_id))
    post = cursor.fetchone()
    if post:
        cursor.execute('''
        UPDATE posts SET content = ? WHERE id = ?
        ''', (new_content, post_id))
        conn.commit()
        print(f"Post ID {post_id} updated.")
    else:
        print("Post not found or you do not have permission to edit this post.")

update_post(user_id, 1, "Updated content for my first post!")

def delete_post(user_id, post_id):
    cursor.execute("SELECT * FROM posts WHERE id = ? AND user_id = ?", (post_id, user_id))
    post = cursor.fetchone()
    if post:
        cursor.execute('DELETE FROM posts WHERE id = ?', (post_id,))
        conn.commit()
        print(f"Post ID {post_id} deleted.")
    else:
        print("Post not found or you do not have permission to delete this post.")

delete_post(user_id, 1)

user_id = login_user("lavisha150@gmail.com")

create_post(user_id, "This is a new post from me!")

view_my_posts(user_id)

update_post(user_id, post_id=1, new_content="Updated content for my first post!")

user_id = login_user("lavisha150@gmail.com")  # Replace with the correct email
print(user_id)  # This should print the correct user ID

def create_post(user_id, content):
    if user_id:
        print(f"Creating post for User ID {user_id}")  # Debugging line to confirm the user ID
        cursor.execute('''
        INSERT INTO posts (user_id, content)
        VALUES (?, ?)
        ''', (user_id, content))
        conn.commit()
        print(f"Post created successfully for User ID {user_id}")
    else:
        print("User must be logged in to create a post.")

view_my_posts(user_id)

def view_my_posts(user_id):
    cursor.execute("SELECT * FROM posts WHERE user_id = ?", (user_id,))
    posts = cursor.fetchall()
    if posts:
        print(f"Posts for User ID {user_id}:")
        for post in posts:
            print(post)  # Should show post ID, user ID, content, and timestamp
    else:
        print("No posts found for this user.")

# Log in as the user and get their user ID
user_id = login_user("lavisha150@gmail.com")

# Use the same user_id to create a post
if user_id:
    create_post(user_id, "This is a test post!")
    view_my_posts(user_id)  # Verify the post was created under this user ID
else:
    print("Failed to log in. Cannot create post.")